
In the Spring Framework, the Service Layer is a key part of the application architecture. It acts as an intermediary between the Controller Layer(handling user input)
and the Data Access Layer (interacting with the database). The primary purpose of the service layer is to encapsulate business logic and ensure separation of concerns.

--------------------------------------------Key Features of the Service Layer-------------------------------------------------

1. Encapsulation of Business Logic:
   - The service layer contains the core business logic of the application.
   - It ensures that the logic is reusable and not duplicated across controllers.

2. Transaction Management:
   - The service layer is often responsible for managing transactions.
   - Spring provides annotations like `@Transactional` to handle transactions declaratively.

3. Dependency Injection:
   - Services are typically annotated with `@Service` and managed by the Spring IoC container.
   - Dependencies (e.g., DAOs or repositories) are injected into the service layer.

4. Separation of Concerns:
   - The service layer separates business logic from the presentation and data access layers.
   - This makes the application easier to test and maintain.

5. Integration with Other Layers:
   - The service layer interacts with the repository/DAO layer to fetch or persist data.
   - It also communicates with the controller layer to provide processed data.


------------------------------------------------Annotations Used in the Service Layer---------------------------------------------

1. @Service:
   - Marks a class as a service component.
   - Indicates that the class contains business logic.

2. @Transactional:
   - Used to manage transactions declaratively.
   - Can be applied at the class or method level.

3. @Autowired:
   - Injects dependencies into the service class.


-------------------------------------------------Best Practices for the Service Layer---------------------------------------------

1. Keep It Focused:
   - Each service should have a single responsibility.
   - Avoid mixing business logic with data access or presentation logic.

2. Use Interfaces:
   - Define service interfaces to decouple the implementation from the client code.

3. Handle Exceptions:
   - Catch and handle exceptions in the service layer to ensure proper error handling.

4. Avoid Direct Database Access:
   - Use repositories or DAOs for database interactions.

5. Write Unit Tests:
   - Test the service layer independently using mock objects for dependencies.


-----------------------------------------------------------Example Program---------------------------------------------------

1. Service Class

    package com.example.demo.service;

    import com.example.demo.model.Product;
    import com.example.demo.repository.ProductRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    public class ProductService {

        @Autowired
        private ProductRepository productRepository;

        // Business logic to fetch all products
        public List<Product> getAllProducts() {
            return productRepository.findAll();
        }

        // Business logic to add a new product
        public Product addProduct(Product product) {
            return productRepository.save(product);
        }

        // Business logic to fetch a product by ID
        public Product getProductById(Long id) {
            return productRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Product not found with ID: " + id));
        }

        // Business logic to delete a product by ID
        public void deleteProduct(Long id) {
            productRepository.deleteById(id);
        }
    }

2. Controller Class

    package com.example.demo.controller;

    import com.example.demo.model.Product;
    import com.example.demo.service.ProductService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @RequestMapping("/products")
    public class ProductController {

        @Autowired
        private ProductService productService;

        @GetMapping
        public List<Product> getAllProducts() {
            return productService.getAllProducts();
        }

        @PostMapping
        public Product addProduct(@RequestBody Product product) {
            return productService.addProduct(product);
        }

        @GetMapping("/{id}")
        public Product getProductById(@PathVariable Long id) {
            return productService.getProductById(id);
        }

        @DeleteMapping("/{id}")
        public void deleteProduct(@PathVariable Long id) {
            productService.deleteProduct(id);
        }
    }


3. Repository Interface

    package com.example.demo.repository;

    import com.example.demo.model.Product;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface ProductRepository extends JpaRepository<Product, Long> {
    }


4. Model Class

    package com.example.demo.model;

    import jakarta.persistence.Entity;
    import jakarta.persistence.GeneratedValue;
    import jakarta.persistence.GenerationType;
    import jakarta.persistence.Id;

    @Entity
    public class Product {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        private String name;
        private double price;

        // Getters and Setters
        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }


-----------------------------------------------------How It Works-------------------------------------------------

1. Controller Layer:
   - Handles HTTP requests and delegates business logic to the service layer.

2. Service Layer:
   - Contains business logic and interacts with the repository layer.

3. Repository Layer:
   - Handles database operations using Spring Data JPA.

4. Model Layer:
   - Represents the data structure (e.g., `Product`).


------------------------------------------------Testing the Service Layer----------------------------------------------------------

You can write unit tests for the `ProductService` class using a mocking framework like Mockito:

    package com.example.demo.service;

    import com.example.demo.model.Product;
    import com.example.demo.repository.ProductRepository;
    import org.junit.jupiter.api.Test;
    import org.mockito.Mockito;

    import java.util.Arrays;
    import java.util.List;

    import static org.junit.jupiter.api.Assertions.assertEquals;
    import static org.mockito.Mockito.*;

    class ProductServiceTest {

        private final ProductRepository productRepository = mock(ProductRepository.class);
        private final ProductService productService = new ProductService();

        @Test
        void testGetAllProducts() {
            Product product1 = new Product();
            product1.setId(1L);
            product1.setName("Product 1");
            product1.setPrice(100.0);

            Product product2 = new Product();
            product2.setId(2L);
            product2.setName("Product 2");
            product2.setPrice(200.0);

            when(productRepository.findAll()).thenReturn(Arrays.asList(product1, product2));

            List<Product> products = productService.getAllProducts();

            assertEquals(2, products.size());
            verify(productRepository, times(1)).findAll();
        }
    }
