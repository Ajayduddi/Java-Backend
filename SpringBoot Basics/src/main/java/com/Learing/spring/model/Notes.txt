
The `model` folder in a Spring application typically contains POJO (Plain Old Java Object) classes.
These classes represent the data or entities used in the application. They are often mapped to database tables
or used to transfer data between different layers of the application (e.g., Controller, Service, Repository).


-------------------------------Why Use POJO Classes in the Model Folder------------------------------------------------

1. Data Representation: POJOs are used to represent the structure of data in the application.
2. Encapsulation: They encapsulate fields and provide getter and setter methods for accessing and modifying data.
3. Reusability: POJOs can be reused across different layers of the application.
4. Integration: They can be annotated with JPA or Hibernate annotations for database mapping.


----------------------------------------Key Features of POJO Classes----------------------------------------------
1. Simple Structure:
   - POJOs are simple Java classes with private fields, public getters, and setters.
2. Annotations:
   - Use annotations like `@Entity`, `@Table`, `@Id`, etc., for database mapping.
   - Use `@Data` (from Lombok) to reduce boilerplate code.
3. Validation:
   - Use annotations like `@NotNull`, `@Size`, `@Email`, etc., for validating fields.
4. Serializable:
   - POJOs are often made `Serializable` to allow easy transfer of data.



----------------------------------------------Example of a POJO Class------------------------------------------------

package com.Learing.spring.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private double price;

    // Default constructor
    public Product() {}

    // Parameterized constructor
    public Product(String name, double price) {
        this.name = name;
        this.price = price;
    }

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}



-----------------------------------------Best Practices for the Model Folder-------------------------------------------
1. Organize by Feature:
   - Group related POJOs into sub-packages if the application is large.
2. Use Lombok:
   - Use Lombok annotations like `@Data`, `@Getter`, `@Setter`, etc., to reduce boilerplate code.
3. Validation:
   - Add validation annotations to ensure data integrity.
4. Avoid Business Logic:
   - Keep POJOs focused on data representation. Delegate business logic to the Service layer.


--------------------------------------------Data Validation in Spring Framework---------------------------------------

Data validation is the process of ensuring that the data provided by the user or external systems meets the required criteria before it is processed.
In Spring, data validation is commonly used to validate input data in web applications, such as form submissions or API requests.


Why Use Data Validation?
    - Data Integrity: Ensures that only valid data is processed and stored.
    - Error Prevention: Prevents invalid or malicious data from causing application errors.
    - User Feedback: Provides meaningful error messages to users for invalid inputs.
    - Security: Protects the application from vulnerabilities like SQL injection or XSS by validating inputs.


---------------------------------Key Features of Data Validation in Spring------------------------------------------
1. Annotations for Validation:
   - Spring supports Java Bean Validation (JSR-380) using annotations like `@NotNull`, `@Size`, `@Email`, etc.
   - Custom validation annotations can also be created.

2. Integration with `@Valid` or `@Validated`:
   - Use `@Valid` or `@Validated` annotations to trigger validation on method parameters or model objects.

3. Error Handling:
   - Use `BindingResult` or `Errors` objects to capture validation errors and provide feedback.

4. Custom Validators:
   - Implement custom validation logic by creating a class that implements the `ConstraintValidator` interface.


Common Validation Annotations
- `@NotNull`: Ensures the field is not null.
- `@Size`: Validates the size of a string, collection, or array.
- `@Min` / `@Max`: Validates minimum and maximum numeric values.
- `@Email`: Validates email format.
- `@Pattern`: Validates a string against a regular expression.
- `@NotEmpty`: Ensures the field is not empty (for strings, collections, etc.).
- `@NotBlank`: Ensures the field is not blank (for strings).


-----------------------------------------Example of Data Validation---------------------------------------------------

1. Model Class with Validation Annotations:
    package com.example.demo.model;

    import jakarta.validation.constraints.Email;
    import jakarta.validation.constraints.NotBlank;
    import jakarta.validation.constraints.Size;

    public class User {

        @NotBlank(message = "Name is required")
        @Size(min = 2, max = 50, message = "Name must be between 2 and 50 characters")
        private String name;

        @NotBlank(message = "Email is required")
        @Email(message = "Invalid email format")
        private String email;

        @NotBlank(message = "Password is required")
        @Size(min = 6, message = "Password must be at least 6 characters long")
        private String password;

        // Getters and Setters
    }

2. Controller to Handle Validation:
    package com.example.demo.controller;

    import com.example.demo.model.User;
    import jakarta.validation.Valid;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.validation.BindingResult;
    import org.springframework.web.bind.annotation.PostMapping;

    @Controller
    public class UserController {

        @PostMapping("/register")
        public String register(@Valid User user, BindingResult result, Model model) {
            if (result.hasErrors()) {
                // Return to the form with validation errors
                return "registrationForm";
            }

            // Process the valid user data
            model.addAttribute("message", "Registration successful!");
            return "success";
        }
    }

3. Custom Validator:
    package com.example.demo.validation;

    import jakarta.validation.ConstraintValidator;
    import jakarta.validation.ConstraintValidatorContext;

    public class CustomValidator implements ConstraintValidator<CustomAnnotation, String> {

        @Override
        public boolean isValid(String value, ConstraintValidatorContext context) {
            // Custom validation logic
            return value != null && value.matches("[A-Za-z0-9]+");
        }
    }


--------------------------------------Best Practices for Data Validation-----------------------------------------------
1. Use Built-in Annotations: Leverage standard annotations for common validation scenarios.
2. Custom Validation: Create custom validators for complex validation logic.
3. Error Messages: Provide clear and user-friendly error messages.
4. Centralized Error Handling: Use `@ControllerAdvice` for global exception handling.
5. Validation Groups: Use validation groups to apply different validation rules in different contexts.
